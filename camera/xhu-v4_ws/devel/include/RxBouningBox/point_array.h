// Generated by gencpp from file RxBouningBox/point_array.msg
// DO NOT EDIT!


#ifndef RXBOUNINGBOX_MESSAGE_POINT_ARRAY_H
#define RXBOUNINGBOX_MESSAGE_POINT_ARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <RxBouningBox/point.h>
#include <RxBouningBox/point.h>
#include <RxBouningBox/point.h>

namespace RxBouningBox
{
template <class ContainerAllocator>
struct point_array_
{
  typedef point_array_<ContainerAllocator> Type;

  point_array_()
    : left()
    , right()
    , center()  {
    }
  point_array_(const ContainerAllocator& _alloc)
    : left(_alloc)
    , right(_alloc)
    , center(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::RxBouningBox::point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::RxBouningBox::point_<ContainerAllocator> >::other >  _left_type;
  _left_type left;

   typedef std::vector< ::RxBouningBox::point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::RxBouningBox::point_<ContainerAllocator> >::other >  _right_type;
  _right_type right;

   typedef std::vector< ::RxBouningBox::point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::RxBouningBox::point_<ContainerAllocator> >::other >  _center_type;
  _center_type center;





  typedef boost::shared_ptr< ::RxBouningBox::point_array_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::RxBouningBox::point_array_<ContainerAllocator> const> ConstPtr;

}; // struct point_array_

typedef ::RxBouningBox::point_array_<std::allocator<void> > point_array;

typedef boost::shared_ptr< ::RxBouningBox::point_array > point_arrayPtr;
typedef boost::shared_ptr< ::RxBouningBox::point_array const> point_arrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::RxBouningBox::point_array_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::RxBouningBox::point_array_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::RxBouningBox::point_array_<ContainerAllocator1> & lhs, const ::RxBouningBox::point_array_<ContainerAllocator2> & rhs)
{
  return lhs.left == rhs.left &&
    lhs.right == rhs.right &&
    lhs.center == rhs.center;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::RxBouningBox::point_array_<ContainerAllocator1> & lhs, const ::RxBouningBox::point_array_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace RxBouningBox

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::RxBouningBox::point_array_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::RxBouningBox::point_array_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::RxBouningBox::point_array_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::RxBouningBox::point_array_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RxBouningBox::point_array_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RxBouningBox::point_array_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::RxBouningBox::point_array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bfbc89fe3fdbe1c213bb38adf4a5ebe3";
  }

  static const char* value(const ::RxBouningBox::point_array_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbfbc89fe3fdbe1c2ULL;
  static const uint64_t static_value2 = 0x13bb38adf4a5ebe3ULL;
};

template<class ContainerAllocator>
struct DataType< ::RxBouningBox::point_array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "RxBouningBox/point_array";
  }

  static const char* value(const ::RxBouningBox::point_array_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::RxBouningBox::point_array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "point[] left\n"
"point[] right\n"
"point[] center\n"
"\n"
"================================================================================\n"
"MSG: RxBouningBox/point\n"
"float64 x\n"
"float64 y \n"
;
  }

  static const char* value(const ::RxBouningBox::point_array_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::RxBouningBox::point_array_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.left);
      stream.next(m.right);
      stream.next(m.center);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct point_array_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::RxBouningBox::point_array_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::RxBouningBox::point_array_<ContainerAllocator>& v)
  {
    s << indent << "left[]" << std::endl;
    for (size_t i = 0; i < v.left.size(); ++i)
    {
      s << indent << "  left[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::RxBouningBox::point_<ContainerAllocator> >::stream(s, indent + "    ", v.left[i]);
    }
    s << indent << "right[]" << std::endl;
    for (size_t i = 0; i < v.right.size(); ++i)
    {
      s << indent << "  right[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::RxBouningBox::point_<ContainerAllocator> >::stream(s, indent + "    ", v.right[i]);
    }
    s << indent << "center[]" << std::endl;
    for (size_t i = 0; i < v.center.size(); ++i)
    {
      s << indent << "  center[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::RxBouningBox::point_<ContainerAllocator> >::stream(s, indent + "    ", v.center[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // RXBOUNINGBOX_MESSAGE_POINT_ARRAY_H
