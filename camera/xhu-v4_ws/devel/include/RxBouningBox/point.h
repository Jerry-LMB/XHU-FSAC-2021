// Generated by gencpp from file RxBouningBox/point.msg
// DO NOT EDIT!


#ifndef RXBOUNINGBOX_MESSAGE_POINT_H
#define RXBOUNINGBOX_MESSAGE_POINT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace RxBouningBox
{
template <class ContainerAllocator>
struct point_
{
  typedef point_<ContainerAllocator> Type;

  point_()
    : x(0.0)
    , y(0.0)  {
    }
  point_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)  {
  (void)_alloc;
    }



   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;





  typedef boost::shared_ptr< ::RxBouningBox::point_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::RxBouningBox::point_<ContainerAllocator> const> ConstPtr;

}; // struct point_

typedef ::RxBouningBox::point_<std::allocator<void> > point;

typedef boost::shared_ptr< ::RxBouningBox::point > pointPtr;
typedef boost::shared_ptr< ::RxBouningBox::point const> pointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::RxBouningBox::point_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::RxBouningBox::point_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::RxBouningBox::point_<ContainerAllocator1> & lhs, const ::RxBouningBox::point_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::RxBouningBox::point_<ContainerAllocator1> & lhs, const ::RxBouningBox::point_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace RxBouningBox

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::RxBouningBox::point_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::RxBouningBox::point_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::RxBouningBox::point_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::RxBouningBox::point_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RxBouningBox::point_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RxBouningBox::point_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::RxBouningBox::point_<ContainerAllocator> >
{
  static const char* value()
  {
    return "209f516d3eb691f0663e25cb750d67c1";
  }

  static const char* value(const ::RxBouningBox::point_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x209f516d3eb691f0ULL;
  static const uint64_t static_value2 = 0x663e25cb750d67c1ULL;
};

template<class ContainerAllocator>
struct DataType< ::RxBouningBox::point_<ContainerAllocator> >
{
  static const char* value()
  {
    return "RxBouningBox/point";
  }

  static const char* value(const ::RxBouningBox::point_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::RxBouningBox::point_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 x\n"
"float64 y \n"
;
  }

  static const char* value(const ::RxBouningBox::point_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::RxBouningBox::point_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct point_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::RxBouningBox::point_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::RxBouningBox::point_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RXBOUNINGBOX_MESSAGE_POINT_H
